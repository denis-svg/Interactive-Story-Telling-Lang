# Generated from Expr.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,16,78,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,
        1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
        1,12,1,13,4,13,61,8,13,11,13,12,13,62,1,14,1,14,5,14,67,8,14,10,
        14,12,14,70,9,14,1,15,4,15,73,8,15,11,15,12,15,74,1,15,1,15,0,0,
        16,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,1,0,4,1,0,48,57,3,0,65,90,95,95,97,122,4,0,
        48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,80,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,
        0,0,0,3,35,1,0,0,0,5,37,1,0,0,0,7,39,1,0,0,0,9,41,1,0,0,0,11,43,
        1,0,0,0,13,45,1,0,0,0,15,47,1,0,0,0,17,49,1,0,0,0,19,51,1,0,0,0,
        21,53,1,0,0,0,23,55,1,0,0,0,25,57,1,0,0,0,27,60,1,0,0,0,29,64,1,
        0,0,0,31,72,1,0,0,0,33,34,5,61,0,0,34,2,1,0,0,0,35,36,5,40,0,0,36,
        4,1,0,0,0,37,38,5,41,0,0,38,6,1,0,0,0,39,40,5,123,0,0,40,8,1,0,0,
        0,41,42,5,125,0,0,42,10,1,0,0,0,43,44,5,34,0,0,44,12,1,0,0,0,45,
        46,5,33,0,0,46,14,1,0,0,0,47,48,5,91,0,0,48,16,1,0,0,0,49,50,5,93,
        0,0,50,18,1,0,0,0,51,52,5,42,0,0,52,20,1,0,0,0,53,54,5,47,0,0,54,
        22,1,0,0,0,55,56,5,45,0,0,56,24,1,0,0,0,57,58,5,43,0,0,58,26,1,0,
        0,0,59,61,7,0,0,0,60,59,1,0,0,0,61,62,1,0,0,0,62,60,1,0,0,0,62,63,
        1,0,0,0,63,28,1,0,0,0,64,68,7,1,0,0,65,67,7,2,0,0,66,65,1,0,0,0,
        67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,30,1,0,0,0,70,68,1,
        0,0,0,71,73,7,3,0,0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,1,0,0,0,74,
        75,1,0,0,0,75,76,1,0,0,0,76,77,6,15,0,0,77,32,1,0,0,0,4,0,62,68,
        74,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    EQ = 1
    LPAREN = 2
    RPAREN = 3
    LCURLY = 4
    RCURLY = 5
    GH = 6
    EXLAM = 7
    L = 8
    R = 9
    MULT = 10
    DIVIDE = 11
    SUB = 12
    ADD = 13
    INT = 14
    ID = 15
    WS = 16

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'('", "')'", "'{'", "'}'", "'\"'", "'!'", "'['", "']'", 
            "'*'", "'/'", "'-'", "'+'" ]

    symbolicNames = [ "<INVALID>",
            "EQ", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "GH", "EXLAM", 
            "L", "R", "MULT", "DIVIDE", "SUB", "ADD", "INT", "ID", "WS" ]

    ruleNames = [ "EQ", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "GH", "EXLAM", 
                  "L", "R", "MULT", "DIVIDE", "SUB", "ADD", "INT", "ID", 
                  "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


